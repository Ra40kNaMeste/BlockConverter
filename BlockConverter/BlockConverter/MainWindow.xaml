<Window x:Class="BlockConverter.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BlockConverter"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:blocks="clr-namespace:BlocksLib.Blocks;assembly=BlocksLib"
        xmlns:tools="clr-namespace:BlockConverter.Tools"
        xmlns:cntr="clr-namespace:BlocksLib.Blocks.CustomControls;assembly=BlocksLib"
        mc:Ignorable="d"
        xmlns:s="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:BlockConverter.ViewModels"
        xmlns:res="clr-namespace:BlockConverter.Resources"
        Title="Block Converter" Height="auto" Width="auto">
    <Window.InputBindings>
        <KeyBinding Modifiers="Ctrl" Key="X" Command="{Binding RemoveBlock}">
            <KeyBinding.CommandParameter>
                <blocks:Block TypeName="Block"/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Key="Delete" Command="{Binding RemoveBlock}">
            <KeyBinding.CommandParameter>
                <blocks:Block TypeName="Block"/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="B" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:Block TypeName="Block"/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="E" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:Block TypeName="EndBlock"/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="O" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:Block TypeName="OutputBlock"/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="M" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:BlockMethod/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="I" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:Block TypeName="InputBlock"/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="R" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:BlockCycle TypeName="BlockCycle"/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="P" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:BlockCycle TypeName="BlockPostCycle"/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="F" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:BlockCycle TypeName="BlockForCycle"/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="T" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:BlockIf/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="K" Command="{Binding AddBlock}">
            <KeyBinding.CommandParameter>
                <blocks:SwitchBlock/>
            </KeyBinding.CommandParameter>
        </KeyBinding>
        <KeyBinding Modifiers="Ctrl" Key="Z" Command="{Binding Undo}"/>
        <KeyBinding Modifiers="Ctrl" Key="Y" Command="{Binding Redo}"/>
        <KeyBinding Modifiers="Ctrl" Key="C" Command="{Binding CopyBlocks}"/>
        <KeyBinding Modifiers="Ctrl" Key="V" Command="{Binding PasteBlocks}"/>
    </Window.InputBindings>
    <Window.Resources>
        <tools:ConverterMultiply x:Key="multiply"/>
        <Style TargetType="GridSplitter">
            <Setter Property="Width" Value="3"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
        </Style>
        <DataTemplate x:Key="DefaultSchemeHeaderTemplate">
            <Border>
                <StackPanel Orientation="Horizontal">
                    <cntr:TextBoxNotEditable cntr:TextBoxNotEditableExtensions.MouseDownHandled="False" Style="{DynamicResource NameSchemeStyle}" Text="{Binding RootComponent.Name, Mode=TwoWay}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDoubleClick">
                                <i:ChangePropertyAction PropertyName="IsEdit" Value="True">
                                </i:ChangePropertyAction>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="LostKeyboardFocus">
                                <i:ChangePropertyAction PropertyName="IsEdit" Value="False">
                                </i:ChangePropertyAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </cntr:TextBoxNotEditable>
                    <Button Style="{DynamicResource CloseSchemeButtonStyle}" Command="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext.RemoveScheme}"
                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=StackPanel}, Path=DataContext}"/>
                </StackPanel>
            </Border>
        </DataTemplate>
        <DataTemplate x:Key="DefaultSchemeContentTemplate">
            <ScrollViewer HorizontalScrollBarVisibility="Auto">
                <ContentPresenter Grid.Row="1" Content="{Binding RootPanel}"/>
            </ScrollViewer>
        </DataTemplate>
        <DataTemplate x:Key="AddNewSchemeButtonHeaderTemplate">
            <Border>
                <Button Style="{DynamicResource AddSchemeButtonStyle}" Margin="0" Command="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext.AddScheme}"/>
            </Border>
        </DataTemplate>
        <DataTemplate x:Key="AddNewSchemeButtonContentTemplate">
            <Grid/>
        </DataTemplate>

    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="5*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Menu Grid.ColumnSpan="5">
            <MenuItem Header="{x:Static res:Resources.MenuFileName}">
                <MenuItem Header="{x:Static res:Resources.MenuExportToPngName}" Command="{Binding Export}" CommandParameter="PNG"/>
                <MenuItem Header="{x:Static res:Resources.MenuSaveAsName}" Command="{Binding Save}"/>
                <MenuItem Header="{x:Static res:Resources.MenuOpenName}" Command="{Binding Open}"/>
                <MenuItem Header="{x:Static res:Resources.MenuCreateNewScheme}" Command="{Binding AddScheme}"/>
                <MenuItem Header="{x:Static res:Resources.MenuSettingsName}" Command="{Binding OpenSettings}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}"/>
            </MenuItem>
            <MenuItem Header="{x:Static res:Resources.MenuEditName}">
                <MenuItem Header="{x:Static res:Resources.MenuAddBlockName}" Command="{Binding AddBlock}" CommandParameter="{Binding ElementName=listBlock, Path=SelectedItem}"/>
                <MenuItem Header="{x:Static res:Resources.MenuRemoveBlockName}" Command="{Binding RemoveBlock}"/>
                <MenuItem Header="{x:Static res:Resources.MenuUndoName}" Command="{Binding Undo}"/>
                <MenuItem Header="{x:Static res:Resources.MenuRedoName}" Command="{Binding Redo}"/>
                <MenuItem Header="{x:Static res:Resources.MenuCopyBlocksName}" Command="{Binding CopyBlocks}"/>
                <MenuItem Header="{x:Static res:Resources.MenuPasteBlocksName}" Command="{Binding PasteBlocks}"/>
                <MenuItem Header="{x:Static res:Resources.MenuConvertName}" Command="{Binding Convert}"
                    CommandParameter="{Binding ElementName=skriptInput, Path=Text}"/>
            </MenuItem>
            <ComboBox ItemsSource="{Binding Instructions}" SelectedItem="{Binding SelectInstruction}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=Name}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding ReadLaguange}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </ComboBox>
        </Menu>
        <GridSplitter Grid.Column="1" Grid.Row="2" Grid.RowSpan="2"/>
        <GridSplitter Grid.Column="3" Width="3" Grid.Row="2" Grid.RowSpan="2"/>
        <tools:TabControlByItemPlanceholder Grid.Row="2" Grid.RowSpan="2" Grid.Column="2" ItemsSource="{Binding Schemes}" SelectedItem="{Binding SelectScheme, Mode=TwoWay}">
            <tools:TabControlByItemPlanceholder.ItemTemplateSelector>
                <tools:TemplateSelectorByItemPlanceholder NewItemTemplate="{StaticResource AddNewSchemeButtonHeaderTemplate}" DefaultTemplate="{StaticResource DefaultSchemeHeaderTemplate}"/>
            </tools:TabControlByItemPlanceholder.ItemTemplateSelector>
            <tools:TabControlByItemPlanceholder.ContentTemplateSelector>
                <tools:TemplateSelectorByItemPlanceholder NewItemTemplate="{StaticResource AddNewSchemeButtonContentTemplate}" DefaultTemplate="{StaticResource DefaultSchemeContentTemplate}"/>
            </tools:TabControlByItemPlanceholder.ContentTemplateSelector>
        </tools:TabControlByItemPlanceholder>

        <ListBox x:Name="listBlock" ItemsSource="{Binding InputBlocks}" Grid.Row="2" Grid.RowSpan="2">
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                </Style>
            </ListBox.ItemContainerStyle>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction Command="{Binding AddBlock}" CommandParameter="{Binding ElementName=listBlock, Path=SelectedItem}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </ListBox>
        <StackPanel Grid.Row="1" Grid.Column="2" Orientation="Horizontal">
            <Button Style="{DynamicResource AddBlockButtonStyle}"
                    ToolTip="{x:Static res:Resources.AddBlockToolTip}" Command="{Binding AddBlock}" 
                    CommandParameter="{Binding ElementName=listBlock, Path=SelectedItem}"/>
            <Button Style="{DynamicResource RemoveBlockButtonStyle}"
                    ToolTip="{x:Static res:Resources.RemoveBlockToolTip}" Command="{Binding RemoveBlock}"/>
            <Button Style="{DynamicResource UndoButtonStyle}"
                    ToolTip="{x:Static res:Resources.UndoBlockToolTip}" Command="{Binding Undo}"/>
            <Button Style="{DynamicResource RedoButtonStyle}"
                    ToolTip="{x:Static res:Resources.RedoBlockToolTip}" Command="{Binding Redo}"/>
            <Button Style="{DynamicResource CopyButtonStyle}" 
                    ToolTip="{x:Static res:Resources.CopyBlocksToolTip}" Command="{Binding CopyBlocks}"/>
            <Button Style="{DynamicResource PasteButtonStyle}" 
                    ToolTip="{x:Static res:Resources.PasteBlocksToolTip}" Command="{Binding PasteBlocks}"/>
            <Button Style="{DynamicResource ConvertButtonStyle}"
                    ToolTip="{x:Static res:Resources.ConvertToolTip}" Command="{Binding Convert}"
                    CommandParameter="{Binding ElementName=skriptInput, Path=Text}"/>
            <Separator/>
        </StackPanel>
        <ScrollViewer HorizontalScrollBarVisibility="Auto" Grid.Column="4" Grid.Row="2">
            <TextBox x:Name="skriptInput" TextWrapping="Wrap" AcceptsReturn="True"/>
        </ScrollViewer>

        <ScrollViewer Grid.Row="3" Grid.Column="4">
            <TextBlock Text="{Binding Dialog}" TextWrapping="Wrap" Background="{Binding DialogColor}"/>
        </ScrollViewer>
    </Grid>

</Window>
